1.Initialize node file.
npm init -y

2.Install cypress 
npm install cypress --save-dev

3.open cypress dashboard
npx cypress open

4.Setup framework
/cypress-project-name
  /cypress
    /e2e              # Test cases
    /pages            # Page Object Models
        /LoginPage.js
        /DashboardPage.js
    /fixtures         # Test data (JSON files)
      /testData.json
    /support          # Helper utilities and commands
      /commands.js    # Custom Cypress commands
      /e2e.js         # Global test configuration
    /plugins          # Plugin files
  cypress.config.js   # Cypress configuration
  package.json   


run cypress in cli : npx cypress run

checkboxes
radiobtns
Dropdowns : Static, Dynamic, Multiple-select
Alerts : **use stub to validate alert text, otherwise it will give false results.
	alert, confirm , prompt
Tables
iFrames
for X-path : npm i -D cypress-xpath
browser controls
Hooks
Fixtures
Reading Data with Excel 
----- with CSV
custom commands
configurations - globa,spec specific

>PAGE OBJECT MODEL (POM)
	BasePage
	Object Creation in PageClass itself
	Method Chaining
	
>Cypress Dashboards : has paid services
>Mochawesome Report - its a javascript framework (not related to cy)

>API testing - GET,POST,PUT,DELETE
Mocks - mocking API i.e. test duplicate of APIs
Stubs

>Docker : 
	Dockerfile(set of instructions to create a docker image) : base image,instructions,layering,best practices...
	
	docker-compose.yml(tool for definig and running multi-container docker apps. ): services, networks, volumes, environmental variables, scaling, dependencies, CLI, port mapping, configuration overrides.
	
	.dockerignore : to add files/folders we want to exclude
	
BDD - Behaviour Driver Development
	Cucumber
		install > configure > add vs extensions (cucumber,cucumber full support). Feature files and Step Def files (***make sure all the namingconventions and configs are accurate) 
	sunchronize feature file with step def file in VS code via setting JSON
	plugins to generate step def files from the feature file
	
	Test data in cucumber - Fixtures(this is recommended option) and Data tables
	HTML report with cucumber (screenshots on failure)
	POM with cucumber
	
CICD - Jenkins
		Nonparamaterized project
		parameterized project
		
***
To avoid flaky tests we can have a 'data-test' attribute having unique values to get the element cypress is looking for for operations.
ex. <h1 class="headingStyle" data-test="heroSectionheading">Welcome</h1>,
	cy.get('[data-test="heroSectionheading"]').contains(/Welcom/i);//here /*/i is for the regex to neglect case.
	
-Cy commands execute in order you write, any custom js written will run asynchronously
-we can use .then to control flow


************misc points********************
-We can use then to handle asynchronous processes.
-Use should('exist')/('not.exist') if we want to assert wether the element is present on the DOM itself or not.
-Use should('be.visible')/('not.be.visible') we want to assert the element when it is present in DOM but visible/not visible for user.
  Example 1: Verify hidden elements using not.be.visible and be.visible.
  Example 2: Handle elements dynamically added to the DOM using not.exist and should('be.visible').


CI/CD - Git/Github Basics.
			yml
			GithubActions 
				customized script run
				multiple browsers
				parallel execution
				reporting through pipline runs - parallel test reporting , configurations as (if:always)etc
				multiple environments - using environment_name.config.js 
				secretvariables in github
			shell commands


